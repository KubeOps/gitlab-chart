#!/bin/bash

set -e

KUBE_COMMAND=$(which kubectl)

OPTS=`getopt -o n:s:k:h --long namespace:,name:,key:,help -n 'create-secret-token' -- "$@"`
eval set -- "$OPTS"

NAMESPACE_CMD=""

display_usage() {
cat <<-EOF
Generates random token values. And uses kubectl to create the Kubernetes Secret in the cluster.

USAGE: create-secret-token [OPTIONS]

OPTIONS

  -n, --namespace='': If present, the kubernetes namespace where the secret will be created.
  -s, --name='': The name for the Kubernetes Secret Object created.
  -k, --key='': The key name used to contain the token data within the Kubernetes Secret.
  -h, --help: Displays this usage message.

EOF
return;
}

while [ ! $# -eq 0 ]
do
	case "$1" in
		--namespace | -n ) NAMESPACE="$2"; NAMESPACE_CMD="-n ${NAMESPACE}"; shift ;;
		--name | -s ) SECRET_NAME="$2"; shift ;;
		--key | -k ) SECRET_KEY="$2"; shift ;;
		--help | -h ) display_usage; exit 0 ;;
	esac
	shift
done

if [ -z $SECRET_NAME ] || [ -z $SECRET_KEY ]; then
	echo "ERROR: Missing required options"
	display_usage
	exit 0
fi

# Create secret token if it doesn't exist
if ! $KUBE_COMMAND ${NAMESPACE_CMD} get secret ${SECRET_NAME} > /dev/null 2>&1; then
  $KUBE_COMMAND ${NAMESPACE_CMD} create secret generic ${SECRET_NAME} --from-literal=${SECRET_KEY}=$(head -c 512 /dev/urandom | tr -cd 'a-zA-Z0-9' | head -c 64)
fi
