{{- if .Values.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "minio.fullname" . }}-config-cm
  labels:
    app: {{ template "minio.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  initialize: |-
    #!/bin/sh
    # minio/mc container has Busybox Ash, be sure to be POSIX compliant and avoid Bash-isms
    set -e ; # Have script exit in the event of a failed command.

    # connectToMinio
    # Use a check-sleep-check loop to wait for Minio service to be available
    connectToMinio() {
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to Minio server: http://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="mc config host add myminio http://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS ] ;
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 1 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }

    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(/usr/bin/mc ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }

    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3


      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          /usr/bin/mc rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi

      # Create the bucket if it does not exist
      if ! checkBucketExists $BUCKET ; then
        echo "Creating bucket '$BUCKET'"
        /usr/bin/mc mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."
      fi

      # At this point, the bucket should exist, skip checking for existance
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      /usr/bin/mc policy $POLICY myminio/$BUCKET
    }

    connectToMinio
    {{- range $bucket := .Values.defaultBuckets }}
    createBucket {{ .name }} {{ default "none" .policy }} {{ default false .purge }}
    {{- end }}
  configure: |-
    {{ .Values.init.script }}
  config.json: |-
    {
      "version": "20",
      "credential": {
        "accessKey": "ACCESS_KEY",
        "secretKey": "SECRET_KEY"
      },
      "region": {{ .Values.minioConfig.region | quote }},
      "browser": {{ .Values.minioConfig.browser | quote }},
      "domain": {{ .Values.minioConfig.domain | quote }},
      "logger": {
        "console": {
          "enable": {{ .Values.minioConfig.logger.console.enable }}
        },
        "file": {
          "enable": {{ .Values.minioConfig.logger.file.enable }},
          "fileName": {{ .Values.minioConfig.logger.file.filename | quote }}
        }
      },
      "notify": {
        "amqp": {
          "1": {
            "enable": {{ .Values.minioConfig.aqmp.enable }},
            "url": {{ .Values.minioConfig.aqmp.url | quote }},
            "exchange": {{ .Values.minioConfig.aqmp.exchange | quote }},
            "routingKey": {{ .Values.minioConfig.aqmp.routingKey | quote }},
            "exchangeType": {{ .Values.minioConfig.aqmp.exchangeType | quote }},
            "deliveryMode": {{ .Values.minioConfig.aqmp.deliveryMode }},
            "mandatory": {{ .Values.minioConfig.aqmp.mandatory }},
            "immediate": {{ .Values.minioConfig.aqmp.immediate }},
            "durable": {{ .Values.minioConfig.aqmp.durable }},
            "internal": {{ .Values.minioConfig.aqmp.internal }},
            "noWait": {{ .Values.minioConfig.aqmp.noWait }},
            "autoDeleted": {{ .Values.minioConfig.aqmp.autoDeleted }}
          }
        },
        "nats": {
          "1": {
            "enable": {{ .Values.minioConfig.nats.enable }},
            "address": {{ .Values.minioConfig.nats.address | quote }},
            "subject": {{ .Values.minioConfig.nats.subject | quote }},
            "username": {{ .Values.minioConfig.nats.username | quote }},
            "password": {{ .Values.minioConfig.nats.password | quote }},
            "token": {{ .Values.minioConfig.nats.token | quote }},
            "secure": {{ .Values.minioConfig.nats.secure }},
            "pingInterval": {{ .Values.minioConfig.nats.pingInterval | int64 }},
            "streaming": {
              "enable": {{ .Values.minioConfig.nats.enableStreaming }},
              "clusterID": {{ .Values.minioConfig.nats.clusterID | quote }},
              "clientID": {{ .Values.minioConfig.nats.clientID | quote }},
              "async": {{ .Values.minioConfig.nats.async }},
              "maxPubAcksInflight": {{ .Values.minioConfig.nats.maxPubAcksInflight | int }}
            }
          }
        },
        "elasticsearch": {
          "1": {
            "enable": {{ .Values.minioConfig.elasticsearch.enable }},
            "format": {{ .Values.minioConfig.elasticsearch.format | quote }},
            "url": {{ .Values.minioConfig.elasticsearch.url | quote }},
            "index": {{ .Values.minioConfig.elasticsearch.index | quote }}
          }
        },
        "redis": {
          "1": {
            "enable": {{ .Values.minioConfig.redis.enable }},
            "format": {{ .Values.minioConfig.redis.format | quote }},
            "address": {{ .Values.minioConfig.redis.address | quote }},
            "password": {{ .Values.minioConfig.redis.password | quote }},
            "key": {{ .Values.minioConfig.redis.key | quote }}
          }
        },
        "postgresql": {
          "1": {
            "enable": {{ .Values.minioConfig.postgresql.enable }},
            "format": {{ .Values.minioConfig.postgresql.format | quote }},
            "connectionString": {{ .Values.minioConfig.postgresql.connectionString | quote }},
            "table": {{ .Values.minioConfig.postgresql.table | quote }},
            "host": {{ .Values.minioConfig.postgresql.host | quote }},
            "port": {{ .Values.minioConfig.postgresql.port | quote }},
            "user": {{ .Values.minioConfig.postgresql.user | quote }},
            "password": {{ .Values.minioConfig.postgresql.password | quote }},
            "database": {{ .Values.minioConfig.postgresql.database | quote }}
          }
        },
        "kafka": {
          "1": {
            "enable": {{ .Values.minioConfig.kafka.enable }},
            "brokers": {{ .Values.minioConfig.kafka.brokers }},
            "topic": {{ .Values.minioConfig.kafka.topic | quote }}
          }
        },
        "webhook": {
          "1": {
            "enable": {{ .Values.minioConfig.webhook.enable }},
            "endpoint": {{ .Values.minioConfig.webhook.endpoint | quote }}
          }
        },
        "mysql": {
          "1": {
            "enable": {{ .Values.minioConfig.mysql.enable }},
            "format": {{ .Values.minioConfig.mysql.format | quote }},
            "dsnString": {{ .Values.minioConfig.mysql.dsnString | quote }},
            "table": {{ .Values.minioConfig.mysql.table | quote }},
            "host": {{ .Values.minioConfig.mysql.host | quote }},
            "port": {{ .Values.minioConfig.mysql.port | quote }},
            "user": {{ .Values.minioConfig.mysql.user | quote }},
            "password": {{ .Values.minioConfig.mysql.password | quote }},
            "database": {{ .Values.minioConfig.mysql.database | quote }}
          }
        },
        "mqtt": {
          "1": {
            "enable": {{ .Values.minioConfig.mqtt.enable }},
            "broker": {{ .Values.minioConfig.mqtt.broker | quote }},
            "topic": {{ .Values.minioConfig.mqtt.topic | quote }},
            "qos": {{ .Values.minioConfig.mqtt.qos | int }},
            "clientId": {{ .Values.minioConfig.mqtt.clientId | quote }},
            "username": {{ .Values.minioConfig.mqtt.username | quote }},
            "password": {{ .Values.minioConfig.mqtt.password | quote }}
          }
        }
      }
    }
# Blank line to signal end of Block
{{- end }}
