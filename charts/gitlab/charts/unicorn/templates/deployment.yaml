{{- if .Values.enabled }}
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ template "name" . }}
        release: {{ .Release.Name }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yml") . | sha256sum }}
{{- if .Values.metrics.enabled }}
{{ toYaml .Values.metrics.annotations | indent 8 }}
{{- end }}
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      initContainers:
        - name: configure
          command: ['sh', '/config/configure']
          image: busybox
          volumeMounts:
          - name: unicorn-config
            mountPath: /config
            readOnly: true
          - name: init-unicorn-secrets
            mountPath: /init-config
            readOnly: true
          - name: unicorn-secrets
            mountPath: /init-secrets
            readOnly: false
        - name: dependencies
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - /scripts/wait-for-deps
          env:
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/var/opt/gitlab/config/gitlab/'
            - name: WORKHORSE_ARCHIVE_CACHE_DISABLED
              value: "1"
          volumeMounts:
            - name: unicorn-config
              mountPath: '/var/opt/gitlab/templates'
            - name: unicorn-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.internalPort }}
              name: unicorn
            - containerPort: {{ .Values.service.workhorseInternalPort }}
              name: workhorse
          env:
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: GITLAB_WORKHORSE_EXTRA_ARGS
              value: {{ .Values.workhorse.extraArgs | quote }}
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/var/opt/gitlab/config/gitlab/'
{{- if .Values.metrics.enabled }}
            - name: prometheus_multiproc_dir
              value: /metrics
{{- end }}
{{- if .Values.workhorse.sentryDSN }}
            - name: GITLAB_WORKHORSE_SENTRY_DSN
              value: {{ .Values.workhorse.sentryDSN }}
{{- end }}
          volumeMounts:
{{- if .Values.metrics.enabled }}
            - name: unicorn-metrics
              mountPath: '/metrics'
{{- end }}
            - name: unicorn-config
              mountPath: '/var/opt/gitlab/templates'
            - name: unicorn-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: unicorn-secrets
              mountPath: /home/git/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
            - name: unicorn-config
              mountPath: '/home/git/gitlab/config/initializers/smtp_settings.rb'
              subPath: smtp_settings.rb
          livenessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 20
            timeoutSeconds: 30
            periodSeconds: 60
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: {{ .Values.service.internalPort }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
      volumes:
{{- if .Values.metrics.enabled }}
      - name: unicorn-metrics
        emptyDir:
          medium: "Memory"
{{- end }}
      - name: unicorn-config
        configMap:
          name: {{ template "fullname" . }}
      - name: init-unicorn-secrets
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: {{ .Values.railsSecrets.secret }}
              items:
                - key: {{ .Values.railsSecrets.key | quote }}
                  path: rails-secrets/secrets.yml
          - secret:
              name: {{ .Values.shell.authToken.secret }}
              items:
                - key: {{ default "secret" .Values.shell.authToken.key }}
                  path: shell/.gitlab_shell_secret
          - secret:
              name: {{ template "gitlab.gitaly.authToken.secret" . }}
              items:
                - key: {{ template "gitlab.gitaly.authToken.key" . }}
                  path: gitaly/gitaly_token
          - secret:
              name: {{ coalesce .Values.redis.password.secret .Values.global.redis.password.secret }}
              items:
                - key: {{ coalesce .Values.redis.password.key .Values.global.redis.password.key }}
                  path: redis/password
          - secret:
              name: {{ template "gitlab.psql.password.secret" . }}
              items:
                - key: {{ template "gitlab.psql.password.key" . }}
                  path: postgres/psql-password
          - secret:
              name: {{ .Values.registry.certificate.secret }}
              items:
                - key: {{ .Values.registry.certificate.key }}
                  path: registry/gitlab-registry.key
          {{- if .Values.minio.enabled }}
          - secret:
              name: {{ .Values.minio.credentials.secret }}
              items:
                - key: accesskey
                  path: minio/accesskey
                - key: secretkey
                  path: minio/secretkey
          {{- end }}
          {{- if .Values.omniauth.providers }}
          {{-   range $index, $entry := .Values.omniauth.providers }}
          - secret:
              name: {{ $entry.secretName }}
              items:
                - key: app_id
                  path: omniauth/{{ $entry.name }}/app_id
                - key: app_secret
                  path: omniauth/{{ $entry.name }}/app_secret
          {{-   end }}
          {{- end }}
          {{- if and $.Values.global.smtp.enabled $.Values.global.smtp.authentication }}
          - secret:
              name: {{ .Values.global.smtp.password.secret | required "Missing required secret containing the SMTP password. Make sure to set `global.smtp.password.secret`" }}
              items:
                - key: {{ .Values.global.smtp.password.key }}
                  path: smtp/smtp-password
          {{- end }}
      - name: unicorn-secrets
        emptyDir:
          medium: "Memory"
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
{{- end }}
